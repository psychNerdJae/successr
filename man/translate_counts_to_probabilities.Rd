% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/translate.R
\name{translate_gamma_to_lookahead}
\alias{translate_gamma_to_lookahead}
\alias{translate_lookahead_to_gamma}
\alias{translate_counts_to_probabilities}
\alias{translate_probabilities_to_counts}
\title{Translate between successor formats}
\usage{
translate_gamma_to_lookahead(successor_horizon)

translate_lookahead_to_gamma(n_steps)

translate_counts_to_probabilities(
  input,
  relation_value_col = NULL,
  successor_horizon_col = NULL,
  successor_horizon_scalar = NULL
)

translate_probabilities_to_counts(
  input,
  relation_value_col = NULL,
  successor_horizon_col = NULL,
  successor_horizon_scalar = NULL
)
}
\arguments{
\item{input}{The learned successor values, either in a dataframe or matrix.}

\item{relation_value_col}{If your input is a dataframe, specify the name
of the column where the relational strengths are encoded.}

\item{successor_horizon_col}{If your input is a dataframe, specify the name
of the column specifying the successor horizon gamma.}

\item{successor_horizon_scalar}{If your input is a matrix, specify the gamma.}
}
\description{
Technically speaking, the values encoded in a successor matrix are (this is a
mouthful) discounted expected counts of future state occupancies, given a
starting state. Whew. More simply: they're counts of how often you'd expect
to end up in a particular state, given that you started out in a particular
state. These counts depend on the number of "steps" the agent is looking into
the future, which is determined by the successor horizon term \eqn{\gamma}.

There's a deterministic relationship between \eqn{\gamma} and the number of
steps the agent looks into the future (lookahead). This means that
\eqn{\gamma} can be used to normalize the successor matrix so that it encodes
probabilities instead of counts. The equation to translate between the two is
\eqn{lookahead = 1 / (1 - \gamma)}. In the case of \eqn{\gamma = 0.8}, for
example, the successor algorithm looks five steps into the future.

We can convert counts into probabilities by scalar-multiplying the matrix
\eqn{M} by the normalization factor \eqn{1 - \gamma}. We can inversely
convert probabilities into counts: \eqn{M * (1 / 1 - \gamma)}.

Yes, it's that easy, but beware that your probabilities might not sum to one
(!!), due to computational limits on numeric precision or a non-converged
(non-asymptotic) matrix.
}
\examples{
`\%>\%` <- magrittr::`\%>\%`
karate_graph <- tidygraph::tbl_graph(edges = successr::karate, directed = F)
karate_obs <- karate_graph \%>\% successr::simulate_experiment(1000)
karate_graph \%>\%
  successr::initialize_successor() \%>\%
  successr::learn_successor(karate_obs, sr, c(0.1, 0.2), c(0, 0.8), TRUE) \%>\%
  successr::translate_counts_to_probabilities(
    relation_value_col = sr,
    successor_horizon_col = successor_horizon
  )

}
